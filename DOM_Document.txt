-----------------------------
** Window Object: **
-- Window object represents an open window in a browser. It is browser's object (not JavaScript) & is automatically created by browser.
-- It is global object.
-- window object is a global object. All html, css, js code is present inside window object.

-------------------------------
** What is the DOM: **
-- When a web page is loaded, the browser creates a Documant Object Model (DOM) of the page.
-- The DOM is a W3C (World Wide Web Consortium) standard.
**Concept: **
-- Basically we can access all HTML with the help of js. In javascript, all html converted into object form and availbale inside document tag that is inside in window object.
-------
The DOM defines a standard for accessing documents:

"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document."

------- 

The W3C DOM standard is separated into 3 different parts:

-- Core DOM - standard model for all document types
-- XML DOM - standard model for XML documents
-- HTML DOM - standard model for HTML documents
-------
Why we use DOM:
-- DOM basically use for dynamic chnages (those changes we don't want to edit or see html or css file so we use js for chnages)

--------
The DOM Programming Interface:
A "Property" is a value that you can get or set (like changing the content of HTML element).
A "Method" is an action you can do (like add or deleting an HTML element).
For Example:
<script>
document.getElementById("demo").innerHTML = "Hello World";
</script>
in the example above, getElementById is a method, while innerHTML is a property.

console.log() use to print elements
console.dir use for documents and properties methods

------------
-- If we define script tag inside head then we don't found or access DOM tags

------------------
*** DOM Manipulation: ***
-- Access each element of HTML.

*Selecting with id: **
-- document.getElementbyid("myid")


**Selecting with Class:**
document.getElementsByClassName("myClass")

-- This is return an HTMl collection (similar to Array but different from array)

**Selecting with tag: **
document.getElementByTagName("p")

**Query Selector: **
document.querySelector("myId / myClass / tag")
-- This is return first element

document.querySlectorAll("myId / myClass / tag")
-- This is return NodeList
-------------------
There are three types of nodes:

-> Elements Node:
	Element nodes HTML elements ko represent karte hain. Har HTML tag ek element node hota hai. Misal ke taur par, jab aap <div>, <p>, ya <h1> tag likhte hain, to ye sab element nodes hain.
	Example:

	<div>
    		<h1>Title</h1>
    		<p>This is a paragraph.</p>
	</div>
	Is example mein, <div>, <h1>, aur <p> sab element nodes hain.

-> Comment Node:
	Comment nodes HTML comments ko represent karte hain. Ye comments DOM mein visible nahi hote magar ye developers ke liye useful hote hain taake wo code mein notes ya explanations daal sakein.
	Example:        <!-- This is a comment -->  (Is example mein, <!-- This is a comment --> ek comment node hai.)
			<p>This is visible text.</p>


-> Text Node:
	Text nodes un text content ko represent karte hain jo elements ke andar hota hai. Jab bhi aap kisi element ke andar text likhte hain, to wo ek text node ban jata hai. Text nodes whitespace (jaise spaces aur new lines) ko bhi include karte hain.
	Example: <p>This is a <strong>bold</strong> statement.</p>
	In this example:
		"This is a " ek text node hai.
		"bold" bhi ek text node hai, lekin ye <strong> tag ke andar hai.
		"statement." bhi ek text node hai.


-------------------
*** Properties: ***
-- After accessign elements with the help of these propertise we can also check the property value and also change the values.

-> tagName: returns tag for element node (to print or find tag name)
-> innerText: returns the text content of the element and all its children
	childtag: (inside thebody all tags are consider to be child tags)
-> innerHTML: returns the plain text or HTML contents in the element
-> textContent: returns textual content even for hidden elements
	-- If we have hide any any tag or element in HTML. That do not display using innerHTML and innerText. So, we use textContent (this
	   helps use to disply hidden data)




	